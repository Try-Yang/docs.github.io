(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{367:function(s,t,a){"use strict";a.r(t);var e=a(43),n=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"基本概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本概念"}},[s._v("#")]),s._v(" 基本概念")]),s._v(" "),a("blockquote",[a("p",[s._v("HEAD、master、branch")])]),s._v(" "),a("h4",{attrs:{id:"head"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#head"}},[s._v("#")]),s._v(" HEAD")]),s._v(" "),a("p",[s._v("首先切换到上一节的目录下，执行 "),a("code",[s._v("git log")]),s._v(" 这是查看提交记录的命令")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("commit f9ef190c1b32b491765799abcb9b5c9486d750de "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("HEAD -"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" master"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nAuthor: try_yang "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("try_yang@163.com"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\nDate:   Tue Jun "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),s._v(":45:30 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2020")]),s._v(" +0800\n\n    branch1 first commit\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("可以看到 "),a("code",[s._v("HEAD -> master")]),s._v(",再第一行的括号中，HEAD指向了master,这代表着当前commit的引用，在个人的理解看来，git中万物皆引用，commit 后面有一串连续的 字符串，这是每个commit的唯一id，重复率很低。")]),s._v(" "),a("p",[s._v("那么到底什么是 HEAD呢，HEAD代指的是当前这个 commit的引用，一个commit又代表什么呢？commit代表的是 当前的一个工作目录，或者一个工作环境。")]),s._v(" "),a("p",[s._v("HEAD永远都代表着当前commit。")]),s._v(" "),a("h4",{attrs:{id:"branch"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#branch"}},[s._v("#")]),s._v(" branch")]),s._v(" "),a("p",[s._v("分支是git中另一个 重要的概念，一定要记住 git中分支之间是平行关系的，下面要说的master分支并不比其它分支要高级。各个分支是互不影响的。")]),s._v(" "),a("p",[s._v("分支的意义在于多人合作开发以及多模块开发。每个人都可以开辟独属于自己的分支，每个功能模块可以开辟各自的功能分支，这样保证master主分支的独立性，各自再各自的分支开发，就可以很好的避免再自己的功能尚未开发完毕，但是别人有需要使用 master分支的情况，安全开发的同时又不影响他人。")]),s._v(" "),a("p",[s._v("同时分支也是一种独特的引用，和 HEAD不同，HEAD是唯一的，指代当前commit，但是分支可以有多个，对应多个commits链路")]),s._v(" "),a("p",[s._v("HEAD 除了可以指向 当前的commit，还可以指向分支，当我们再提交一部分内容的时候，commit会携带着HEAD 以及他所指向的 分支一起 向前移动，具体的分支有哪些操作，后续章节总结")]),s._v(" "),a("p",[s._v("总结一下：branch可以看作是初始的commit 到 branch现在所指向的commit的所有commits所组成的一条链条")]),s._v(" "),a("ul",[a("li",[s._v("什么是初始commits？这里有一个特别点，初始commits不是当前分支和主分支的交叉点，而是第一次的提交点，因为各个分支之间是平等的不要理解为主分支的子分支")]),s._v(" "),a("li",[s._v("当 branch1和master合并后，那么branch 其实就有两条路径了，master分支的commits链就有两条了，这两条都可以看做主分支")])]),s._v(" "),a("h4",{attrs:{id:"master"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#master"}},[s._v("#")]),s._v(" master")]),s._v(" "),a("p",[s._v("master是我们再创建git库的时候自动创建的分支，也就是一个默认分支，我们平时再 "),a("code",[s._v("git clone")]),s._v("操作的时候，默认签出这个master分支，同时将 "),a("code",[s._v("HEAD")]),s._v("也对应的移动到 "),a("code",[s._v("commits")]),s._v(" 链的最顶部")]),s._v(" "),a("h4",{attrs:{id:"远程仓库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#远程仓库"}},[s._v("#")]),s._v(" 远程仓库")]),s._v(" "),a("p",[s._v("如果git只能再本地进行操作，那么其实对工作的帮助不是很大，所以一般我们都会拥有 一个git服务器用来托管所有的git仓库，这样大家都可以去操作这同一个仓库")]),s._v(" "),a("h5",{attrs:{id:"如何添加远程仓库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何添加远程仓库"}},[s._v("#")]),s._v(" 如何添加远程仓库")]),s._v(" "),a("p",[s._v("首先得有对应的git服务器的账户，这里我们以码云为例（国内比较快）")]),s._v(" "),a("p",[s._v("如果是一个新的git 仓库")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("mkdir")]),s._v(" git_test\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" git_test\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" init\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# /------以上三行命令是用来初始化一个git仓库--------/")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("touch")]),s._v(" README.md\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),s._v(" README.md\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" commit -m "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"first commit"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# /-     以上三行是添加一个最新的提交记录用来初始化          -/")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# /-重点 执行远程仓库绑定命令，origin是远程仓库的默认名-/")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" remote "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),s._v(" origin https://gitee.com/yttdade/git_test.git\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" push -u origin master\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[s._v("针对已经存在的项目")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" existing_git_repo\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" remote "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),s._v(" origin https://gitee.com/yttdade/git_test.git\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" push -u origin master\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("提示：当我们再远程创建仓库的时候，切记创建一个空的仓库，不要去添加默认的README.md文件，这个操作由本地来完成")]),s._v(" "),a("h4",{attrs:{id:"pull"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pull"}},[s._v("#")]),s._v(" pull")]),s._v(" "),a("p",[s._v("这个操作是将远端仓库的代码同步到本地，保证代码永远是最新的")]),s._v(" "),a("h4",{attrs:{id:"merge"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#merge"}},[s._v("#")]),s._v(" merge")]),s._v(" "),a("p",[s._v("因为git远程仓库的存在，每个开发者都可以访问，同时还拥有多个分支的存在，那么不可避免的就会存在分支内容不同步的状态，所以 "),a("code",[s._v("merge")]),s._v("操作应运而生，它做的事情就是 将一个 指定的 "),a("code",[s._v("commit")]),s._v(" 合并到当前的 "),a("code",[s._v("commit")]),s._v("，然后生成一个 新的"),a("code",[s._v("commit")]),s._v(",同时将 "),a("code",[s._v("HEAD")]),s._v(" 指向 "),a("code",[s._v("commit")])]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 在master分支下，合并 test分支的内容")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" merge "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("test")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h5",{attrs:{id:"常见的场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常见的场景"}},[s._v("#")]),s._v(" 常见的场景")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("git pull")]),s._v(" 操作，其实就是将远端仓库的内容 用merge合并到当前的分支")]),s._v(" "),a("li",[s._v("多分支合并，再多人开发的过程中，一般每个人都会有自己的分支，当大家的内容都开发完成后，就需要使用 merge 合并到一起去")])]),s._v(" "),a("h4",{attrs:{id:"push"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#push"}},[s._v("#")]),s._v(" push")]),s._v(" "),a("p",[s._v("将branch上传到远端仓库，也就是用本地的内容覆盖掉远端的内容，它会将整个 commits链上的所有commit信息全部上传到远端。这里有一个注意点是，HEAD是不会同步上传的，远端仓库的HEAD默认情况下永远是 master分支的最新的commits")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" push origin branch1\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("上传远端仓库的时候 需要指定 远程仓库的名称以及对应的 分支名称，因为默认情况下只能上传 clone下来后存在的分支，新建的分支是无法通过 "),a("code",[s._v("git push")]),s._v("直接上传的")])])}),[],!1,null,null,null);t.default=n.exports}}]);