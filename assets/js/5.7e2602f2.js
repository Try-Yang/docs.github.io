(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{348:function(s,t,a){s.exports=a.p+"assets/img/error_commit.316a227f.png"},365:function(s,t,a){"use strict";a.r(t);var n=a(43),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,n=s._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h4",{attrs:{id:"什么是版本回退？"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#什么是版本回退？"}},[s._v("#")]),s._v(" 什么是版本回退？")]),s._v(" "),n("p",[s._v("就是将已经修改好的工作区内容回归到修改点之前，不管是回退一个 commit，还是一个文件，都可以被叫做回退操作")]),s._v(" "),n("h4",{attrs:{id:"工作区和暂存区和版本库"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#工作区和暂存区和版本库"}},[s._v("#")]),s._v(" 工作区和暂存区和版本库")]),s._v(" "),n("h5",{attrs:{id:"工作区"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#工作区"}},[s._v("#")]),s._v(" 工作区")]),s._v(" "),n("p",[s._v("我们的工作目录，也就是操作项目文件的地方，是我们可以直接修改的地方")]),s._v(" "),n("h5",{attrs:{id:"暂存区"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#暂存区"}},[s._v("#")]),s._v(" 暂存区")]),s._v(" "),n("p",[s._v("保存了下一次 "),n("code",[s._v("commit")]),s._v("的文件信息列表，它位于 根目录"),n("code",[s._v(".git")]),s._v("文件夹下的 index文件，一般我们都会称为暂存区")]),s._v(" "),n("h5",{attrs:{id:"版本库"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#版本库"}},[s._v("#")]),s._v(" 版本库")]),s._v(" "),n("p",[s._v("也就是我们上面提到的 "),n("code",[s._v(".git")]),s._v("隐藏文件夹，他里面存了很多东西，包括git hooks的配置，暂存区的信息等等，不要随便操作")]),s._v(" "),n("h4",{attrs:{id:"如何取消上一次的提交？"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#如何取消上一次的提交？"}},[s._v("#")]),s._v(" 如何取消上一次的提交？")]),s._v(" "),n("p",[s._v("经常会碰到这样一种情况，我们再提交代码的时候，commit完成后发现，有段代码有问题，这时候怎么办呢？")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("修改错误代码，重新提交，但是会多一个提交记录")])]),s._v(" "),n("li",[n("p",[s._v("使用 "),n("code",[s._v("git commit --amend")]),s._v("命令")]),s._v(" "),n("p",[s._v("这时候，git不会再创建新的commit，而使将当前commit的内容和暂存区的内容合并起来 创建一个新的 commit，然后把当前commit替换掉，当然有时候我们仅仅是commit的信息写错了，想更改一下信息，也可以直接使用这个命令。")]),s._v(" "),n("p",[n("img",{attrs:{src:a(348),alt:""}})])])]),s._v(" "),n("p",[s._v("一般再控制台会直接显示上述内容，直接使用 vim 输入模式进行修改保存退出即可")]),s._v(" "),n("h4",{attrs:{id:"修改第-n-1-次提交呢？"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#修改第-n-1-次提交呢？"}},[s._v("#")]),s._v(" 修改第 n - 1 次提交呢？")]),s._v(" "),n("p",[s._v("有可能我们是提交了好几次后才发现前面有一次的提交有问题，那么该 怎么办呢？粗鲁一点话就直接修改后再提交，但是如果刚好有一个人根据 commit信息使用了对应的commit签出了一个新的分支，那么就会出现问题。")]),s._v(" "),n("p",[s._v("这时候需要使用 "),n("code",[s._v("git rebase -i")]),s._v(" 了，使用变基操作来实现,通过这个命令可以合并提交记录，同时也可以进行提交记录的修改，他就像一个控制器。先说说怎么使用把")]),s._v(" "),n("div",{staticClass:"language-shell line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" log --oneline\na431b4d "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("HEAD -"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" branch2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" 修改 commit\nacc217f 修改第二个 commit "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),s._v("\n08cc31e master second commit\n80928c3 first commit\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 当前分支有以上四个提交记录，如果要修改第二个的话 acc217f，此时使用rebase进行操作")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" rebase -i HEAD^^ "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 执行命令，HEAD之前已经提过，代表当前的commit")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 此时命令行会进入如下页面，这时候会顺序列出 commit链，此时我们要修改的是acc217f的commit，这时候将pick 改为edit即可，注意这里是vim模式，当然还有很多其它模式，注释中已经列出来了，先不做介绍")]),s._v("\npick acc217f 修改第二个 commit "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),s._v("\npick a431b4d 修改 commit\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Rebase 08cc31e..a431b4d onto 08cc31e (2 commands)")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Commands:")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# p, pick <commit> = use commit")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# r, reword <commit> = use commit, but edit the commit message")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# e, edit <commit> = use commit, but stop for amending")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# s, squash <commit> = use commit, but meld into previous commit")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# f, fixup <commit> = like "squash", but discard this commit\'s log message')]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# x, exec <command> = run command (the rest of the line) using shell")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# b, break = stop here (continue rebase later with 'git rebase --continue')")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# d, drop <commit> = remove commit")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# l, label <label> = label current HEAD with a name")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# t, reset <label> = reset HEAD to a label")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# m, merge [-C <commit> | -c <commit>] <label> [# <oneline>]")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# .       create a merge commit using the original merge commit's")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# .       message (or the oneline, if no original merge commit was")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# .       specified). Use -c <commit> to reword the commit message.")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# These lines can be re-ordered; they are executed from top to bottom.")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# If you remove a line here THAT COMMIT WILL BE LOST.")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 修改完成后保存退出，此时命令行展示如下信息，Stopped at acc217f，在此次变基操作的流程中再 acc这个commit下停止了，这时候我们就可以利用之前的知识，通过 git commit --amend 修改对应的文件或者不需要修改文件修改commit信息，然后直行   git rebase --continue，那么此次修改commit操作就会完成了")]),s._v("\nStopped at acc217f"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".  修改第二个 commit "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),s._v("\nYou can amend the commit now, with\n\n  "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" commit --amend\n\nOnce you are satisfied with your changes, run\n\n  "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" rebase --continue\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 修改完成后 继续查看log发现已经修改完毕")]),s._v("\nb8a570d "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("HEAD -"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" branch2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),s._v("\n03a6b3b 修改commit1\n08cc31e master second commit\n80928c3 first commit\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br")])]),n("h4",{attrs:{id:"直接丢弃提交"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#直接丢弃提交"}},[s._v("#")]),s._v(" 直接丢弃提交")]),s._v(" "),n("p",[s._v("有时候发现我们的有一个commit写的问题特别多，修改的代价很大不如直接删除，这时候修改还不如完全删除。")]),s._v(" "),n("h5",{attrs:{id:"git-reset-hard"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#git-reset-hard"}},[s._v("#")]),s._v(" git reset --hard")]),s._v(" "),n("p",[s._v("通过这条命令，可以撤消对应的commit")]),s._v(" "),n("p",[n("code",[s._v("git reset --hard HEAD^^^")]),s._v(" 表示要撤消哪一个 ，对应的也可以理解为恢复为某个commit的父提交，比如说撤消当前 就是 "),n("code",[s._v("HEAD^")]),s._v(",恢复到他的 上一个提交去")]),s._v(" "),n("div",{staticClass:"language-shell line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" reset --hard HEAD^^\nAuthor: 杨涛涛 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<>")]),s._v("\nDate:   Tue Jun "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),s._v(":46:08 "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2020")]),s._v(" +0800\n\n    master second commit\n\ncommit 80928c35d48b346eaa9c033796b13d3411933b05\nAuthor: 杨涛涛 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<>")]),s._v("\nDate:   Tue Jun "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),s._v(":42:14 "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2020")]),s._v(" +0800\n\n    first commit\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 发现之前的两个提交已经完全没了，这时候重新进行修改即可")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br")])]),n("p",[s._v("上面这个操作其实再git的操作中很简单，就是将HEAD的指向改变即可")]),s._v(" "),n("h4",{attrs:{id:"针对已经push到远程的撤消"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#针对已经push到远程的撤消"}},[s._v("#")]),s._v(" 针对已经push到远程的撤消")]),s._v(" "),n("h5",{attrs:{id:"个人独立开发分支"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#个人独立开发分支"}},[s._v("#")]),s._v(" 个人独立开发分支")]),s._v(" "),n("p",[s._v("如果当前错误内容不影响其他人，那么将对应的commit 修改删除，然后强制push即可")]),s._v(" "),n("p",[n("code",[s._v("git push origin dev -f")])]),s._v(" "),n("h5",{attrs:{id:"已经进行功能分支合并了"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#已经进行功能分支合并了"}},[s._v("#")]),s._v(" 已经进行功能分支合并了")]),s._v(" "),n("p",[s._v("这时候肯定不能使用强制push，否则很容易产生冲突。影响到别人的代码。只能通过添加新的提交来替代之前的提交")]),s._v(" "),n("p",[n("code",[s._v("git revert HEAD^^")]),s._v(" 通过这个命令来修改出错的commit，然后重新提交")])])}),[],!1,null,null,null);t.default=e.exports}}]);